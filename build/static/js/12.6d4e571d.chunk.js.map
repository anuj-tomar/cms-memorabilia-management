{"version":3,"sources":["components/reservation/reserve.js"],"names":["ReservedRoom","props","_this","Object","_Users_user_Desktop_workspace_quorumweb_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","this","_Users_user_Desktop_workspace_quorumweb_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_Users_user_Desktop_workspace_quorumweb_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","intialiseState","data","arguments","length","undefined","isinit","memberId","getValue","memberId_name","memberObj","reservationType","rTypeId","startTime","endTime","note","guest","errorMessages","isValid","validate","name","value","_this$state","state","error","type","errorMsg","setState","inputChange","e","_e$target","target","checked","_Users_user_Desktop_workspace_quorumweb_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","compareStartEndTime","_this$state2","s","Date","getTime","st","et","onSubmit","preventDefault","forEach","isvalid","keys","isSaving","payload","assign","token","date","dateToStr","updatePageData","url","concat","Endpoint","RESERVATION","bookingId","method","action","page","response","status","toastmessage","message","closeModal","setChips","_this$setState2","item","id","getIndividualItem","params","resetPageStore","prevProps","prevState","itemData","isObject","isObjEmpty","stateD","_this$state3","_this$props","itemLoader","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","className","room","_customFields_loader__WEBPACK_IMPORTED_MODULE_10__","Fragment","_customFields_chips__WEBPACK_IMPORTED_MODULE_9__","placeholder","namespace","livesearch","autocomplete","service","MEMBER","vk","sk","chips","maxCount","_customFields_inputField__WEBPACK_IMPORTED_MODULE_8__","dom","groupClass","onChange","onClick","Component","connect","_ref","auth","_ref$page","_ref$page$individualI","individualItem","_ref$page$itemLoader"],"mappings":"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","file":"static/js/12.6d4e571d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport InputField from '../customFields/inputField';\nimport Chips from '../customFields/chips';\nimport Loader from '../customFields/loader';\nimport { getValue, dateToStr } from '../../utils/formatter';\nimport { validate } from '../../utils/validation';\nimport { isObject, isObjEmpty  } from '../../utils';\nimport { updatePageData, getIndividualItem, resetPageStore } from '../../actions/page';\nimport { Endpoint } from '../../utils/constants';\n\nclass ReservedRoom extends Component {\n    constructor(props) {\n        super(props);\n        this.state = this.intialiseState();\n       // isSaving: false;\n    }\n\n    intialiseState = (data = {}, isinit=true) => {\n        return {\n            memberId: getValue(data, 'memberId', ''),\n            memberId_name: data.memberObj ? [data.memberObj] : [],\n            reservationType: getValue(data, 'nature', ''),\n            rTypeId: getValue(data, 'rTypeId', this.props.rTypeId),\n            startTime: getValue(data, 'startTime', null),\n            endTime: getValue(data, 'endTime', null),\n            note: getValue(data, 'note', ''),\n            guest: getValue(data, 'guest', ''),\n            errorMessages: {},\n            isValid: {},\n            isinit\n        }\n    }\n    componentDidMount() {\n        if (this.props.bookingId) {\n            this.props.getIndividualItem({\n                params: { token: this.props.token },\n                url: `${Endpoint.RESERVATION}/${this.props.bookingId}`\n            });\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.resetPageStore('individualItem');\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.itemData != this.props.itemData && prevState.isinit && isObject(this.props.itemData) && !isObjEmpty(this.props.itemData)) {\n            let stateD = this.intialiseState(this.props.itemData, false);\n            this.setState(stateD);\n        }\n    }\n    validate = (name, value) => {\n        let { isValid, errorMessages } = this.state;\n        let error = validate(name, value, { type: 'text' , errorMsg: name == 'memberId' ? 'No member selected': '' });\n        isValid[name] = error.isValid;\n        error.isValid\n            ? delete errorMessages[name]\n            : (errorMessages[name] = error.errorMsg);\n        this.setState({ isValid, errorMessages });\n    };\n\n    inputChange = e => {\n        let {\n            target: { name, value, checked, type }\n        } = e;\n        this.setState({ [name]: type == 'checkbox' ? checked : value }, () => {\n            this.validate(name, value);\n        });\n    };\n    compareStartEndTime = () =>{\n      let { startTime, endTime, error} = this.state;\n      let s = new Date(\"1970-01-01 8:00 am\").getTime();\n      let st = new Date(\"1970-01-01 \"+startTime).getTime();\n      let et = new Date(\"1970-01-01 \"+endTime).getTime();\n      if(st < s){\n        error = \"Start time must be greater than or equal to 08:00 am\";\n      }else if(st > et){\n        error = \"Start time must be less than end time\";\n      }else{\n        error = ''\n      }\n      this.setState({ error });\n      return error ? false : true;\n    }\n    onSubmit = (e) => {\n        e.preventDefault();\n        [\"memberId\", \"rTypeId\", \"startTime\", \"endTime\", \"guest\"].forEach((name) => {\n            this.validate(name, this.state[name]);\n        });\n        let isvalid = this.compareStartEndTime();\n        if (Object.keys(this.state.errorMessages).length == 0 && isvalid) {\n            this.setState({ error: '', isSaving: true });\n            let payload = Object.assign({}, this.state);\n            payload.token = this.props.token\n            payload.date = dateToStr(this.props.date, 'YYYY-MM-DD');\n            delete payload.errorMessages;\n            delete payload.isValid;\n            this.props.updatePageData({\n                payload,\n                url: `${Endpoint.RESERVATION}${this.props.bookingId ? '/' + this.props.bookingId : ''}`,\n                method: this.props.bookingId ? \"PUT\" : 'POST',\n                action: this.props.bookingId ? \"update\" : 'add',\n                page: 'reserve',\n            }, (response) => {\n                if (response.status) {\n                    this.setState({ error: '', isSaving: false });\n                    this.props.toastmessage(response.message);\n                    this.props.closeModal();\n                } else {\n                    this.setState({ error: response.message, isSaving: false })\n                }\n            });\n        }\n    }\n    setChips = (value, name, item = {}) => {\n        this.setState({ [name]: item.id, [name + '_name']: value });\n        if(!value.length){\n            this.state.isValid[name] = false\n            this.state.errorMessages[name] = 'This field is required.'\n            this.setState({ errorMessages: this.state.errorMessages, isValid: this.state.isValid })\n        }else{\n            this.state.isValid[name] = true\n            delete this.state.errorMessages[name]; \n            this.setState({ errorMessages: this.state.errorMessages, isValid: this.state.isValid })\n        }\n    };\n\n    render() {\n        let { memberId, memberId_name,  rTypeId, reservationType, startTime, endTime, note, guest, errorMessages, isValid, error,isSaving } = this.state;\n        let { token, bookingId, itemLoader } = this.props;\n        return (\n            <div className='eventModal reservedModal'>\n                <div className='d-flex justify-content-between'>\n                    <div className='title-txt'>{this.props.room}</div>\n                    <div className='title-txt'>{dateToStr(this.props.date)}</div>\n                </div>\n                {itemLoader && <Loader />}\n                {!itemLoader && <React.Fragment>\n                <div>\n                    <div className='row no-gutters mb15'>\n                        <div className='col-2'><label className='label-txt'>MEMBER NAME</label></div>\n                        <div className='col-10'>\n                            <Chips\n                                placeholder=\"Member Name\"\n                                className=\"\"\n                                name=\"memberId\"\n                                namespace=\"countryList\"\n                                livesearch={true}\n                                autocomplete={false}\n                                service={`${Endpoint.MEMBER}?token=${token}`}\n                                vk=\"id\"\n                                sk=\"name\"\n                                chips={memberId_name}\n                                maxCount={1}\n                                setChips={this.setChips}\n                            />\n                            {!isValid.memberId && <p className=\"error_msg\"> {errorMessages.memberId}</p>}\n                        </div>\n                    </div>\n                    <div className='row no-gutters mb15'>\n                        <div className='col-2'><label className='label-txt'>START TIME</label></div>\n                        <div className='col-3'>\n                            <InputField name=\"startTime\" value={startTime} isValid={isValid.startTime} errorMsg={errorMessages.startTime}\n                                inputChange={this.inputChange} dom={{ placeholder: 'START TIME', type: 'time' }} />\n                        </div>\n                        <div className='col-3'><label className='label-txt pl35'>NO. OF GUESTS</label></div>\n                        <div className='col-4'>\n                            <InputField name=\"guest\" groupClass='input-style' value={guest} isValid={isValid.guest} errorMsg={errorMessages.guest}\n                                inputChange={this.inputChange} dom={{ placeholder: 'NO. OF GUESTS', type: 'number' }} />\n                        </div>\n                    </div>\n                    <div className='row no-gutters mb15'>\n                        <div className='col-2'><label className='label-txt'>END TIME</label></div>\n                        <div className='col-3'>\n                            <InputField name=\"endTime\" value={endTime} isValid={isValid.endTime} errorMsg={errorMessages.endTime}\n                                inputChange={this.inputChange} dom={{ placeholder: 'END TIME', type: 'time' }} />\n                        </div>\n                        <div className='col-3'><label className='label-txt pl35'>RESERVATION TYPE</label></div>\n                        <div className='col-4'>\n                            <InputField name=\"reservationType\" groupClass='input-style' value={reservationType} isValid={isValid.reservationType} errorMsg={errorMessages.reservationType}\n                                inputChange={this.inputChange} dom={{ placeholder: 'RESERVATION TYPE' }} />\n                        </div>\n                    </div>\n                </div>\n                <div className='row no-gutters mb15'>\n                    <div className='col-1'><label className='label-txt'>NOTES</label></div>\n                    <div className='col-11'>\n                        <div className='aboutEvent'><textarea className='input-style h100px' name=\"note\" value={note} onChange={this.inputChange}></textarea></div>\n                    </div>\n                </div>\n                {error && <p className=\"error_msg\"> {error}</p>}\n                <div className='text-right'>\n                    <div onClick={this.onSubmit}className={`btn ${isSaving ? 'btndisabled' : ''}`}>{bookingId ? 'update' : 'Save'}</div>\n                </div>\n                </React.Fragment>}\n            </div>\n        );\n    }\n}\nfunction mapStateToProps({ auth: { token }, page: { individualItem: { data = {} }, itemLoader = false } }) {\n    return { token, itemData: data, itemLoader }\n}\n\nexport default connect(mapStateToProps, { updatePageData, getIndividualItem, resetPageStore })(ReservedRoom);\n"],"sourceRoot":""}